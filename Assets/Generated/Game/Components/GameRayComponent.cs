//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity rayEntity { get { return GetGroup(GameMatcher.Ray).GetSingleEntity(); } }
    public RayComponent ray { get { return rayEntity.ray; } }
    public bool hasRay { get { return rayEntity != null; } }

    public GameEntity SetRay(System.Collections.Generic.List<UnityEngine.Vector2> newHitPoints) {
        if (hasRay) {
            throw new Entitas.EntitasException("Could not set Ray!\n" + this + " already has an entity with RayComponent!",
                "You should check if the context already has a rayEntity before setting it or use context.ReplaceRay().");
        }
        var entity = CreateEntity();
        entity.AddRay(newHitPoints);
        return entity;
    }

    public void ReplaceRay(System.Collections.Generic.List<UnityEngine.Vector2> newHitPoints) {
        var entity = rayEntity;
        if (entity == null) {
            entity = SetRay(newHitPoints);
        } else {
            entity.ReplaceRay(newHitPoints);
        }
    }

    public void RemoveRay() {
        rayEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RayComponent ray { get { return (RayComponent)GetComponent(GameComponentsLookup.Ray); } }
    public bool hasRay { get { return HasComponent(GameComponentsLookup.Ray); } }

    public void AddRay(System.Collections.Generic.List<UnityEngine.Vector2> newHitPoints) {
        var index = GameComponentsLookup.Ray;
        var component = (RayComponent)CreateComponent(index, typeof(RayComponent));
        component.hitPoints = newHitPoints;
        AddComponent(index, component);
    }

    public void ReplaceRay(System.Collections.Generic.List<UnityEngine.Vector2> newHitPoints) {
        var index = GameComponentsLookup.Ray;
        var component = (RayComponent)CreateComponent(index, typeof(RayComponent));
        component.hitPoints = newHitPoints;
        ReplaceComponent(index, component);
    }

    public void RemoveRay() {
        RemoveComponent(GameComponentsLookup.Ray);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRay;

    public static Entitas.IMatcher<GameEntity> Ray {
        get {
            if (_matcherRay == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Ray);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRay = matcher;
            }

            return _matcherRay;
        }
    }
}
